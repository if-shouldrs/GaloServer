plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.miniclip.galo.afonso'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Lombok dependency
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Required for Lombok to work with Spring Boot's configuration processor
	compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

tasks.named('test') {
	useJUnitPlatform()
}

// --- Docker tasks

tasks.register('buildDockerImage', Exec) {
	group = 'docker'
	dependsOn bootJar
	def projectName = rootProject.name.toLowerCase();
	doFirst {
		println "Building Docker image for $projectName: version $version"
	}
	commandLine 'docker', 'build', '-t', "$projectName:$version",
			'--build-arg', "APP_NAME=${rootProject.name}",
			'--build-arg', "APP_VERSION=$version", '.'
}

tasks.register('generateCompose') {
	group = 'docker'
	def projectName = rootProject.name.toLowerCase()
	def appVersion = project.version.toString()
	def appImage = "${projectName}:${appVersion}"

	doFirst {
		println "Generating docker-compose.yml for image $appImage"
		def composeTemplate = file('docker-compose.template.yml').text
		def composeContent = composeTemplate.replace('${APP_IMAGE}', appImage)
		file('docker-compose.yml').text = composeContent
	}
}

tasks.register('runWithDocker', Exec) {
	dependsOn 'buildDockerImage', 'generateCompose'
	group = 'docker'
	doFirst {
		println 'Running application using Docker...'
	}
	commandLine 'docker-compose', 'up', '--build'
}
